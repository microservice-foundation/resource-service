plugins {
    id 'java'
    id "org.springframework.boot" version "${springBootVersion}"
    id "io.spring.dependency-management" version "${dependancyManagementVersion}"
    id "org.springframework.cloud.contract" version "${verifierVersion}"
    id 'maven-publish'
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://repo.spring.io/release" }
}

group = 'com.epam.training'
version = '1.0'
sourceCompatibility = '11'

dependencies {
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'software.amazon.awssdk:s3'
    implementation 'org.springframework.kafka:spring-kafka'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:localstack'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'com.amazonaws:aws-java-sdk-s3:1.12.387'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.testcontainers:kafka:1.17.6'
    testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-verifier'
}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "software.amazon.awssdk:bom:${amazonSdkVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named('contractTest') {
    useJUnitPlatform()
}

contracts {
    contractsDslDir = file("src/test/resources/contracts")
    testFramework = 'JUNIT5'
    baseClassForTests = 'com.epam.training.microservicefoundation.resourceservice.base.RestBase'
    contractsDslDir = new File(project.rootDir, "src/test/java/contracts")
}

contractTest {
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "Results: (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            boolean skipTests = Boolean.parseBoolean(project.findProperty('SKIP_TESTS') ?: "false")
            if (result.testCount == 0 && !skipTests) {
                throw new IllegalStateException("No tests were found. Failing the build")
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact bootJar

            artifact verifierStubsJar

            // https://github.com/spring-gradle-plugins/dependency-management-plugin/issues/273
            versionMapping {
                usage("java-api") {
                    fromResolutionOf("runtimeClasspath")
                }
                usage("java-runtime") {
                    fromResolutionResult()
                }
            }
        }
    }
}